package database

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/canonical/lxd/lxd/db/query"
	"github.com/canonical/lxd/shared/api"
	"github.com/canonical/microcluster/cluster"
)

var _ = api.ServerEnvironment{}

var nodeObjects = cluster.RegisterStmt(`
SELECT nodes.id, internal_cluster_members.name AS member, nodes.name, nodes.role, nodes.machine_id
  FROM nodes
  JOIN internal_cluster_members ON nodes.member_id = internal_cluster_members.id
  ORDER BY nodes.name
`)

var nodeObjectsByMember = cluster.RegisterStmt(`
SELECT nodes.id, internal_cluster_members.name AS member, nodes.name, nodes.role, nodes.machine_id
  FROM nodes
  JOIN internal_cluster_members ON nodes.member_id = internal_cluster_members.id
  WHERE ( member = ? )
  ORDER BY nodes.name
`)

var nodeObjectsByName = cluster.RegisterStmt(`
SELECT nodes.id, internal_cluster_members.name AS member, nodes.name, nodes.role, nodes.machine_id
  FROM nodes
  JOIN internal_cluster_members ON nodes.member_id = internal_cluster_members.id
  WHERE ( nodes.name = ? )
  ORDER BY nodes.name
`)

var nodeObjectsByRole = cluster.RegisterStmt(`
SELECT nodes.id, internal_cluster_members.name AS member, nodes.name, nodes.role, nodes.machine_id
  FROM nodes
  JOIN internal_cluster_members ON nodes.member_id = internal_cluster_members.id
  WHERE ( nodes.role = ? )
  ORDER BY nodes.name
`)

var nodeObjectsByMachineID = cluster.RegisterStmt(`
SELECT nodes.id, internal_cluster_members.name AS member, nodes.name, nodes.role, nodes.machine_id
  FROM nodes
  JOIN internal_cluster_members ON nodes.member_id = internal_cluster_members.id
  WHERE ( nodes.machine_id = ? )
  ORDER BY nodes.name
`)

var nodeID = cluster.RegisterStmt(`
SELECT nodes.id FROM nodes
  WHERE nodes.name = ?
`)

var nodeCreate = cluster.RegisterStmt(`
INSERT INTO nodes (member_id, name, role, machine_id)
  VALUES ((SELECT internal_cluster_members.id FROM internal_cluster_members WHERE internal_cluster_members.name = ?), ?, ?, ?)
`)

var nodeDeleteByName = cluster.RegisterStmt(`
DELETE FROM nodes WHERE name = ?
`)

var nodeUpdate = cluster.RegisterStmt(`
UPDATE nodes
  SET member_id = (SELECT internal_cluster_members.id FROM internal_cluster_members WHERE internal_cluster_members.name = ?), name = ?, role = ?, machine_id = ?
 WHERE id = ?
`)

// nodeColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the Node entity.
func nodeColumns() string {
	return "nodes.id, internal_cluster_members.name AS member, nodes.name, nodes.role, nodes.machine_id"
}

// getNodes can be used to run handwritten sql.Stmts to return a slice of objects.
func getNodes(ctx context.Context, stmt *sql.Stmt, args ...any) ([]Node, error) {
	objects := make([]Node, 0)

	dest := func(scan func(dest ...any) error) error {
		n := Node{}
		err := scan(&n.ID, &n.Member, &n.Name, &n.Role, &n.MachineID)
		if err != nil {
			return err
		}

		objects = append(objects, n)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"nodes\" table: %w", err)
	}

	return objects, nil
}

// getNodes can be used to run handwritten query strings to return a slice of objects.
func getNodesRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]Node, error) {
	objects := make([]Node, 0)

	dest := func(scan func(dest ...any) error) error {
		n := Node{}
		err := scan(&n.ID, &n.Member, &n.Name, &n.Role, &n.MachineID)
		if err != nil {
			return err
		}

		objects = append(objects, n)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"nodes\" table: %w", err)
	}

	return objects, nil
}

// GetNodes returns all available nodes.
// generator: node GetMany
func GetNodes(ctx context.Context, tx *sql.Tx, filters ...NodeFilter) ([]Node, error) {
	var err error

	// Result slice.
	objects := make([]Node, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = cluster.Stmt(tx, nodeObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"nodeObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Role != nil && filter.Member == nil && filter.Name == nil && filter.MachineID == nil {
			args = append(args, []any{filter.Role}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, nodeObjectsByRole)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"nodeObjectsByRole\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(nodeObjectsByRole)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"nodeObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Name != nil && filter.Member == nil && filter.Role == nil && filter.MachineID == nil {
			args = append(args, []any{filter.Name}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, nodeObjectsByName)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"nodeObjectsByName\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(nodeObjectsByName)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"nodeObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Member != nil && filter.Name == nil && filter.Role == nil && filter.MachineID == nil {
			args = append(args, []any{filter.Member}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, nodeObjectsByMember)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"nodeObjectsByMember\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(nodeObjectsByMember)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"nodeObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.MachineID != nil && filter.Member == nil && filter.Name == nil && filter.Role == nil {
			args = append(args, []any{filter.MachineID}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, nodeObjectsByMachineID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"nodeObjectsByMachineID\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(nodeObjectsByMachineID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"nodeObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Member == nil && filter.Name == nil && filter.Role == nil && filter.MachineID == nil {
			return nil, fmt.Errorf("Cannot filter on empty NodeFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getNodes(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getNodesRaw(ctx, tx, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"nodes\" table: %w", err)
	}

	return objects, nil
}

// GetNode returns the node with the given key.
// generator: node GetOne
func GetNode(ctx context.Context, tx *sql.Tx, name string) (*Node, error) {
	filter := NodeFilter{}
	filter.Name = &name

	objects, err := GetNodes(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"nodes\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "Node not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"nodes\" entry matches")
	}
}

// GetNodeID return the ID of the node with the given key.
// generator: node ID
func GetNodeID(ctx context.Context, tx *sql.Tx, name string) (int64, error) {
	stmt, err := cluster.Stmt(tx, nodeID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"nodeID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, api.StatusErrorf(http.StatusNotFound, "Node not found")
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"nodes\" ID: %w", err)
	}

	return id, nil
}

// NodeExists checks if a node with the given key exists.
// generator: node Exists
func NodeExists(ctx context.Context, tx *sql.Tx, name string) (bool, error) {
	_, err := GetNodeID(ctx, tx, name)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}

		return false, err
	}

	return true, nil
}

// CreateNode adds a new node to the database.
// generator: node Create
func CreateNode(ctx context.Context, tx *sql.Tx, object Node) (int64, error) {
	// Check if a node with the same key exists.
	exists, err := NodeExists(ctx, tx, object.Name)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, api.StatusErrorf(http.StatusConflict, "This \"nodes\" entry already exists")
	}

	args := make([]any, 4)

	// Populate the statement arguments.
	args[0] = object.Member
	args[1] = object.Name
	args[2] = object.Role
	args[3] = object.MachineID

	// Prepared statement to use.
	stmt, err := cluster.Stmt(tx, nodeCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"nodeCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"nodes\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"nodes\" entry ID: %w", err)
	}

	return id, nil
}

// DeleteNode deletes the node matching the given key parameters.
// generator: node DeleteOne-by-Name
func DeleteNode(_ context.Context, tx *sql.Tx, name string) error {
	stmt, err := cluster.Stmt(tx, nodeDeleteByName)
	if err != nil {
		return fmt.Errorf("Failed to get \"nodeDeleteByName\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(name)
	if err != nil {
		return fmt.Errorf("Delete \"nodes\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "Node not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Node rows instead of 1", n)
	}

	return nil
}

// UpdateNode updates the node matching the given key parameters.
// generator: node Update
func UpdateNode(ctx context.Context, tx *sql.Tx, name string, object Node) error {
	id, err := GetNodeID(ctx, tx, name)
	if err != nil {
		return err
	}

	stmt, err := cluster.Stmt(tx, nodeUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"nodeUpdate\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(object.Member, object.Name, object.Role, object.MachineID, id)
	if err != nil {
		return fmt.Errorf("Update \"nodes\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}
